---
interface Props {
  src: string
  alt?: string
  id?: string
  style?: string
  width?: string
  height?: string
  loop?: bool
  autoplay?: bool
  renderer?: string
  mode?: string
  controls?: bool
  speed?: number,
  interactivity?: string
  animationOptions?: object
  className?: string
}

let { src, id, loop, autoplay, name, renderer, mode, controls, speed, interactivity, alt, style = {}, width = 'auto', height= 'auto', animationOptions = {}, class: className = '' } = Astro.props as props

var animation = false;

if (src && src.endsWith('json')) {
	animation = true;
	style.width = width;
	style.height = height;
}

src = src ?? animationOptions.src ?? '';
alt = alt ?? animationOptions.alt ?? 'Image';
id = id ?? animationOptions.id;
loop = loop ?? animationOptions.loop ?? true;
autoplay = autoplay ?? animationOptions.autoplay ?? true;
renderer = renderer ?? animationOptions.renderer;
mode = mode ?? animationOptions.mode;
controls = controls ?? animationOptions.controls ?? false;
speed = speed ?? animationOptions.speed;

let styleString = (
  Object.entries(style).map(([k, v]) => `${k}:${v}`).join(';')
);

if (interactivity == 'scroll') {
	loop = false;
	autoplay = false;
}

---
	
{animation ? (
	<lottie-player class={`${className} ${interactivity == 'scroll' && 'lottie-scroll'} lottie lottie-player`} 
		id={id}
		width={width} 
		height={height}
		src={src} 
		loop={loop} 
		controls={controls}
		speed={speed}
		autoplay={autoplay}
		renderer={renderer} 
		style={styleString}
		></lottie-player> 
) : (
	<img class={`${className} image`} id={id} src={src} alt={alt} width={width} height={height} style={styleString} loading="lazy" />
)}
